const UserMoviesService = require('../services/userMovies');
const userMovieService = new UserMoviesService();

// Structure of a document from the 'user-movies' collection:
// { _id, userId, movieId }. Where _id is autogenerated by Mongo.
// userId is the _id of a document from the 'users' collection
// movieId is the _id of a document from the 'movies' colelction

// @desc    Fetch all movies for a given user (all 'user-movies' documents that match the userId)
// @route   GET /api/user-movies
// @access
exports.getUserMovies = async (req, res, next) => {
  const { userId } = req.query;
  try {
    const userMovies = await userMovieService.getUserMovies({ userId });
    res.status(200).json({
      data: userMovies,
      message: 'user movies listed',
    });
  } catch (err) {
    next(err);
  }
};

// @desc    Create a 'user-movies' document.
// @route   POST /api/user-movies
// @access
exports.createUserMovie = async (req, res, next) => {
  const { body: userIdAndMovieId } = req;
  try {
    const createdUserMovieId = await userMovieService.createUserMovie({
      userIdAndMovieId,
    });
    res.status(201).json({
      data: createdUserMovieId,
      message: 'user movie created',
    });
  } catch (err) {
    next(err);
  }
};

// @desc    Delete a movie from a given user. (deletes the 'user-movies' document based on its _id)
// @route   DELETE /api/user-movies/:userMovieId
// @access
exports.deleteUserMovie = async (req, res, next) => {
  const { userMovieId } = req.params;
  try {
    const deletedUserMovieId = await userMovieService.deleteUserMovie({
      userMovieId,
    });
    res.status(200).json({
      data: deletedUserMovieId,
      message: 'user movie deleted',
    });
  } catch (err) {
    next(err);
  }
};
